### NETWORKING

net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

## IMPROVING PERFORMANCE

# Increasing the size of the receive queue.

# The received frames will be stored in this queue after taking them from the
# ring buffer on the network card.
# Increasing this value for high speed cards may help prevent losing packets.
net.core.netdev_max_backlog = 100000
net.core.netdev_budget = 50000
net.core.netdev_budget_usecs = 5000

# Increase the maximum connections
# The upper limit on how many connections the kernel will accept.
#net.core.somaxconn = 1024

# Increase the memory dedicated to the network interfaces
# The default and maximum amount for the receive/send socket memory.
# By default the Linux network stack is not configured for high speed large
# file transfer across WAN links.
# This is done to save memory resources.
# You can easily tune Linux network stack by increasing network buffers size
# for high-speed networks that connect server systems to handle more network
# packets.
net.core.rmem_default = 1048576
net.core.rmem_max = 16777216
net.core.wmem_default = 1048576
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 1048576 2097152
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

# Increase the maximum ancillary buffer size allowed per socket.
# The ancillary buffer is a sequence that contains the size and protocol of
# incoming packets.
net.core.optmem_max = 65536

# Enable TCP Fast Open
# TCP Fast Open is an extension to the transmission control protocol (TCP) that
# helps reduce network latency by enabling data to be exchanged during the
# senderâ€™s initial TCP SYN.
net.ipv4.tcp_fastopen = 3

# Tweak the pending connection handling

# Controls the tendency of the kernel to reclaim the memory which is used for
# caching of directory and inode objects (VFS cache). Lowering it from the
# default value of 100 makes the kernel less inclined to reclaim VFS cache (do
# not set it to 0, this may produce out-of-memory conditions).
net.ipv4.tcp_max_syn_backlog = 30000

# Maximum number of sockets in 'TIME_WAIT' state.
# After reaching this number the system will start destroying the socket that
# are in this state.
# Increase this to prevent simple DOS attacks.
net.ipv4.tcp_max_tw_buckets = 2000000

# Sets whether TCP should reuse an existing connection in the TIME-WAIT state
# for a new outgoing connection if the new timestamp is strictly bigger than
# the most recent timestamp recorded for the previous connection.
# This helps avoid from running out of available network sockets.
net.ipv4.tcp_tw_reuse = 1

# Fast-fail FIN connections which are useless.
net.ipv4.tcp_fin_timeout = 10

# Sets whether TCP should start at the default window size only for new
# connections or also for existing connections that have been idle for too
# long.
# This setting kills persistent single connection performance and should be
# turned off.
net.ipv4.tcp_slow_start_after_idle = 0

# Change TCP keepalive parameters
# TCP keepalive is a mechanism for TCP connections that help to determine
# whether the other end has stopped responding or not.
# TCP will send the keepalive probe contains null data to the network peer
# several times after a period of idle time. If the peer does not respond, the
# socket will be closed automatically.
# By default, TCP keepalive process waits for two hours (7200 secs) for socket
# activity before sending the first keepalive probe, and then resend it every
# 75 seconds. As long as there is TCP/IP socket communications going on and
# active, no keepalive packets are needed.
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6

# Enable MTU probing
# The longer the MTU the better for performance, but the worse for reliability.
# This is because a lost packet means more data to be retransmitted and because
# many routers on the Internet can't deliver very long packets.
net.ipv4.tcp_mtu_probing = 1

# TCP Timestamps
# tcp timestamp
# + protect against wrapping sequence numbers (at gigabit speeds)
# + round trip time calculation implemented in TCP
# - causes extra overhead and allows uptime detection by scanners like nmap
# enable @ gigabit speeds
#net.ipv4.tcp_timestamps = 0

# Enable BBR
net.ipv4.tcp_congestion_control = bbr

## TCP/IP STACK HARDENING

# TCP SYN cookie protection
# helps protect against SYN flood attacks
# only kicks in when net.ipv4.tcp_max_syn_backlog is reached
net.ipv4.tcp_syncookies = 1

# TCP RFC1337
# Controls the tendency of the kernel to reclaim the memory which is used for
# caching of directory and inode objects (VFS cache). Lowering it from the
# default value of 100 makes the kernel less inclined to reclaim VFS cache (do
# not set it to 0, this may produce out-of-memory conditions).
net.ipv4.tcp_rfc1337 = 1

# Reverse path filtering
# sets the kernels reverse path filtering mechanism to value 1 (on)
# will do source validation of the packet's recieved from all the interfaces on the machine
# protects from attackers that are using ip spoofing methods to do harm (default)
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1

# Log martian packets
#net.ipv4.conf.default.log_martians = 1
#net.ipv4.conf.all.log_martians = 1

# Disable ICMP redirecting
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Enable IPv6 Privacy Extensions (RFC3041) and prefer temporary addresses over public addresses
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Enable Ignoring to ICMP Request
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1

### VIRTUAL MEMORY

# Contains, as a percentage of total available memory that contains free pages
# and reclaimable pages, the number of pages at which a process which is
# generating disk writes will itself start writing out dirty data.
vm.dirty_ratio = 4

# Contains, as a percentage of total available memory that contains free pages
# and reclaimable pages, the number of pages at which the background kernel
# flusher threads will start writing out dirty data.
vm.dirty_background_ratio = 2

vm.swappiness = 10

# Controls the tendency of the kernel to reclaim the memory which is used for
# caching of directory and inode objects (VFS cache). Lowering it from the
# default value of 100 makes the kernel less inclined to reclaim VFS cache (do
# not set it to 0, this may produce out-of-memory conditions).
vm.vfs_cache_pressure = 50

vm.min_free_kbytes = 102400
vm.nr_hugepages = 128

## KERNEL HARDENING

# Restricting access to kernel logs
kernel.dmesg_restrict = 1

# Restricting access to kernel pointers in the proc filesystem
kernel.kptr_restrict = 1

# Harden BPF JIT compiler
net.core.bpf_jit_harden = 1

# Disable kexec
# kernel.kexec_loaded_disabled = 1

# Disable unprivileged user namespace usage
# kernel.unprivileged_userns_clone = 0

# Enable the ExecShield protection
kernel.exec-shield = 2

# Others
kernel.kexec_loaded_disabled = 1
kernel.printk = 3 3 3 3
